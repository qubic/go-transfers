syntax = "proto3";

package qubic.transfers.proto;

option go_package = "github.com/qubic/go-transfers/proto/";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

message HealthResponse {
  string status = 1;
  map<string, Component> components = 2;
}

message Component {
  string status = 1;
  map<string, string> details = 2;
}

message TickRequest {
  uint32 tick = 1;
}

message EntityRequest {
  string identity = 1;
}

message AssetChangeEventsResponse {
  uint32 latestTick = 2;
  repeated AssetChangeEvent events = 3;
}

message QuTransferEventsResponse {
  uint32 latestTick = 2;
  repeated QuTransferEvent events = 3;
}

message QuTransferEvent {
  string sourceId = 1;
  string destinationId = 2;
  uint64 amount = 3;
  string transactionHash = 4;
  uint32 tick = 5;
  uint32 eventType = 6;
}

message AssetChangeEvent {
  string sourceId = 1;
  string destinationId = 2;
  string issuerId = 3;
  string name = 4;
  uint64 numberOfShares = 5;
  string transactionHash = 6;
  uint32 tick = 7;
  uint32 eventType = 8;
}

service TransferService {

  rpc Health(google.protobuf.Empty) returns (HealthResponse) {
    option (google.api.http) = {
      get: "/status/health"
    };
  }

  rpc GetAssetChangeEventsForTick(TickRequest) returns (AssetChangeEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/ticks/{tick}/events/asset-transfer"
    };
  }

  rpc GetQuTransferEventsForTick(TickRequest) returns (QuTransferEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/ticks/{tick}/events/qu-transfer"
    };
  }

  rpc GetAssetChangeEventsForEntity(EntityRequest) returns (AssetChangeEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/entities/{identity}/events/asset-transfer"
    };
  }

  rpc GetQuTransferEventsForEntity(EntityRequest) returns (QuTransferEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/entities/{identity}/events/qu-transfer"
    };
  }

}
